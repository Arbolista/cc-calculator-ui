'use strict';

var test = require('tape');
var reactTemplates = require('../../src/reactTemplates');
var fs = require('fs');
var util = require('./utils/util');

test('html tests', function (t) {
    var files = ['sectionsReorganize.rt'];
    t.plan(files.length);

    files.forEach(check);

    //function check(testFile) {
    //    var filename = util.joinDataPath(testFile);
    //    var code = '';
    //    try {
    //        var html = util.readFile(filename);
    //        var expected = util.readFileNormalized(filename + '.html');
    //        code = reactTemplates.convertTemplateToReact(html).replace(/\r/g, '');
    //        var actual = util.codeToHtml(code);
    //        actual = util.normalizeHtml(actual);
    //        expected = util.normalizeHtml(expected);
    //        var equal = util.compareAndWrite(t, actual, expected, filename);
    //        if (!equal) {
    //            fs.writeFileSync(filename + '.code.js', code);
    //        }
    //    } catch (e) {
    //        console.log(testFile, e);
    //        fs.writeFileSync(filename + '.code.js', code);
    //    }
    //}
});

function handleStyleProp(val, node, context) {
    //var styleParts = val.trim().split(';');
    //styleParts = _.compact(_.map(styleParts, function (str) {
    //    str = str.trim();
    //    if (!str || str.indexOf(':') === -1) {
    //        return null;
    //    }
    //    var res = str.split(':');
    //    res[0] = res[0].trim();
    //    res[1] = res.slice(1).join(':').trim();
    //    return res;
    //}));

    /*eslint lodash/prefer-compact:0*/
    /*eslint lodash/prefer-invoke:0*/
    /*eslint lodash/prefer-wrapper-method:0*/
    var styleStr = _(val.trim().split(';')).map(function (s) {
        return s.trim();
    })
    //.filter(s => s)
    .map(function (str) {
        str = str.trim();
        if (!str || str.indexOf(':') === -1) {
            return null;
        }
        var res = str.split(':');
        res[0] = res[0].trim();
        res[1] = res.slice(1).join(':').trim();
        return res;
    }).compact().map(function (stylePart) {
        return stringUtils.convertToCamelCase(stylePart[0]) + ' : ' + convertText(node, context, stylePart[1].trim());
    }).join(',');

    //var styleStr = _.map(styleParts, stylePart => stringUtils.convertToCamelCase(stylePart[0]) + ' : ' + convertText(node, context, stylePart[1].trim())).join(',');
    return '{' + styleStr + '}';
}